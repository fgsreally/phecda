import { Construct, getMergedMeta } from 'phecda-core'
import { joinUrl } from '../helper'
import type { ControllerMetaData, Meta } from '../meta'
import { Generator } from './utils'

export class OpenAPIGenerator extends Generator {
  ext = '.json'
  name = 'OpenAPI'
  paths: Record<string, any> = {}
  getContent() {
    return JSON.stringify({
      openapi: '3.0.0',
      info: {
        title: 'API Documentation',
        version: '1.0.0',
        description: 'API documentation generated by phecda-server',
      },
      paths: this.paths,
    })
  }

  addMethod(args: ControllerMetaData, model: Construct) {
    const {
      http, tag, method,
    } = args
    if (!http?.method)
      return

    const config = getMergedMeta(model, method).openapi

    if (!config)
      return

    const path = joinUrl(http.prefix, http.route)
    if (!this.paths[path])
      this.paths[path] = {}

    this.paths[path][http.method as string] = {
      summary: config.summary,
      description: config.description,
      tags: config.tags || [tag],
      deprecated: config.deprecated,
      parameters: config.parameters,
      requestBody: config.requestBody,
      responses: config.responses,
    }
  }

  generateCode(meta: Meta[]): string {
    meta.forEach(({ data, model }) => {
      if (data.controller === 'http')
        this.addMethod(data as ControllerMetaData, model)
    })
    return this.getContent()
  }
}
