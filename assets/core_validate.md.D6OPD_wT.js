import{_ as i,c as a,o as n,ae as e}from"./chunks/framework.xEY7gGyy.js";const c=JSON.parse('{"title":"验证","description":"","frontmatter":{},"headers":[],"relativePath":"core/validate.md","filePath":"core/validate.md","lastUpdated":1759401398000}'),t={name:"core/validate.md"};function l(p,s,h,k,d,r){return n(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="验证" tabindex="-1">验证 <a class="header-anchor" href="#验证" aria-label="Permalink to &quot;验证&quot;">​</a></h1><p>基于元数据，以及部分装饰器的语义，实现验证</p><p>相关装饰器包括 <code>Rule/Const/OneOf/Enum/Required/Optional/Min/Max/Nested</code></p><p>只会对被<code>pc</code>装饰器装饰的属性进行验证，如果没有被<code>Optional</code>装饰，那么就会被认为是必填项（和<code>Required</code>效果一致）</p><p>来个例子</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {validate} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;phecda-core&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Min</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//大于等于1</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//需要为数字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, data, )</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//err为错误信息数组，默认有一个错误就会中止验证并退出，所以err长度为1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果validate 第三个参数为true，那么就会验证所有字段，err就可能不为1，但一个字段，最多只会有一个错误信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 比如count字段元数据number的验证如果错了，那么就不会走Min的验证，只有一条错误信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果需要自定义错误信息，那么可以通过validate的第四个参数</span></span></code></pre></div>`,6)])])}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
