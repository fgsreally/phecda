import{_ as c,c as o,a1 as a,o as d}from"./chunks/framework.CzimxKfo.js";const b=JSON.parse('{"title":"phecda-web","description":"","frontmatter":{},"headers":[],"relativePath":"web/intro.md","filePath":"web/intro.md","lastUpdated":1735529245000}'),t={name:"web/intro.md"};function p(l,e,r,i,s,n){return d(),o("div",null,e[0]||(e[0]=[a('<h1 id="phecda-web" tabindex="-1">phecda-web <a class="header-anchor" href="#phecda-web" aria-label="Permalink to &quot;phecda-web&quot;">​</a></h1><p><code>phecda-web</code>是为了<code>Phecda</code>在浏览器端的实现，</p><p>其包含<code>phecda-core</code>的所有，并实现了<code>phecda-core</code>未实现的装饰器，如<code>Storage</code></p><div class="info custom-block"><p class="custom-block-title">共同点</p><p>和<code>phecda-server</code>一致，也是通过<code>Tag/类名</code>去标记模块，且是唯一标记，</p><p>只会加载第一个，后续同名模块被忽略</p><p>且也是单例模式，每个<code>model</code>只会被实例化一次</p></div><p>由于现代前端开发几乎都是基于响应式，即数据变化通过框架自行更改视图</p><p>并不能直接使用<code>phecda-web</code>,而是要在此基础上，根据不同框架，更改响应式数据的实现，再进行一次封装</p><h2 id="支持框架" tabindex="-1">支持框架 <a class="header-anchor" href="#支持框架" aria-label="Permalink to &quot;支持框架&quot;">​</a></h2><p>目前支持</p><ol><li><a href="./vue/base.html">phecda-vue</a></li><li><a href="./react/base.html">phecda-react</a></li></ol><p>也可以自行封装</p><div class="warning custom-block"><p class="custom-block-title">前提</p><p>两个前提：</p><ol><li><p>构造函数的依赖注入需要编译支持<code>ts</code>元数据，建议使用<code>unplugin-swc</code>(如果不用也没事，只是不能构造函数注入)</p></li><li><p>框架必须要支持深层响应的响应式数据，最典型的是<code>vue</code>中的<code>ref</code></p></li></ol></div>',11)]))}const m=c(t,[["render",p]]);export{b as __pageData,m as default};
