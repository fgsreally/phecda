import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.BujyyggW.js";const c=JSON.parse('{"title":"跨项目","description":"","frontmatter":{},"headers":[],"relativePath":"server/build/cross-project.md","filePath":"server/build/cross-project.md","lastUpdated":1750437448000}'),n={name:"server/build/cross-project.md"};function p(l,s,h,o,d,r){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="跨项目" tabindex="-1">跨项目 <a class="header-anchor" href="#跨项目" aria-label="Permalink to &quot;跨项目&quot;">​</a></h1><p>在<a href="./../base.html#调用方调用">基础使用</a>的案例中，客户端和服务端是在同一个项目中</p><p>而实际情况是：两者可能不在一个项目内，</p><p>其实原理是一样的：让类型指向服务端，让运行时指向服务端生成的代码</p><h2 id="服务方" tabindex="-1">服务方 <a class="header-anchor" href="#服务方" aria-label="Permalink to &quot;服务方&quot;">​</a></h2><p>更改<code>package.json</code></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ps-test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./client&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./.ps/http.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/index.d.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此时，入口<code>ps-test/client</code>的类型和实际代码引入并不相同</p><div class="info custom-block"><p class="custom-block-title">ci/cd中构建产物</p><p>很显然，上面 index.d.ts 可以build出来，但http.js则一定需要程序运行时才产生，</p><p>那么在ci/cd中，可以”稍微“运行一下程序，产生产物后立刻结束，<a href="./../runtime/command.html#phecda-server-generate-file">详见</a></p></div><h2 id="调用方" tabindex="-1">调用方 <a class="header-anchor" href="#调用方" aria-label="Permalink to &quot;调用方&quot;">​</a></h2><p>在调用端通过<code>npm</code>安装</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ps-test</span></span></code></pre></div><p>然后：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { UserController } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ps-test/client&#39;</span></span></code></pre></div>`,14)]))}const E=i(n,[["render",p]]);export{c as __pageData,E as default};
