import{_ as e,c as o,o as c,a2 as d}from"./chunks/framework.OWRZTr7j.js";const m=JSON.parse('{"title":"phecda-core","description":"","frontmatter":{},"headers":[],"relativePath":"core/intro.md","filePath":"core/intro.md","lastUpdated":1720680065000}'),a={name:"core/intro.md"},t=d('<h1 id="phecda-core" tabindex="-1">phecda-core <a class="header-anchor" href="#phecda-core" aria-label="Permalink to &quot;phecda-core&quot;">​</a></h1><p><code>phecda-core</code>是以<code>装饰器为核心</code>，<code>面向对象</code>的一套工具，也是一套标准</p><p>从而为多端提供一致的开发体验</p><p>简而言之，<code>PC</code>通过装饰器往类的属性/方法上挂了一些元数据</p><p>后续操作中消费这些元数据，即生产消费模式</p><blockquote><p><code>PC</code>本身没有使用元数据，可以在<code>JS</code>环境中使用</p></blockquote><h2 id="具体方式" tabindex="-1">具体方式 <a class="header-anchor" href="#具体方式" aria-label="Permalink to &quot;具体方式&quot;">​</a></h2><p><code>PC</code>将类上属性、方法分为以下几种：</p><ol><li>没有被任何<code>PC</code>中的装饰器修饰、操作的</li><li>含有数据的</li><li>暴露的</li><li>忽略的</li></ol><p>可以这么理解：没有被<code>PC</code>装饰器修饰的属性，不是<code>PC</code>希望操作的属性，</p><p>在后续消费中，就完全不管这个属性</p><p>被修饰的属性，上面就会挂载东西，即<code>含有数据的</code>属性，</p><p>但这个属性，可能在后续消费中被忽视（即使其本身含有数据），即<code>忽略的</code>属性</p><p>那后续消费中真正拿到的属性就是 <code>暴露的</code>=<code>含有数据的</code>-<code>忽略的</code></p>',14),r=[t];function p(i,l,n,_,s,h){return c(),o("div",null,r)}const u=e(a,[["render",p]]);export{m as __pageData,u as default};
