import{_ as o,c,o as d,ae as p}from"./chunks/framework.BvUyxZsb.js";const u=JSON.parse('{"title":"phecda-server","description":"","frontmatter":{},"headers":[],"relativePath":"server/intro.md","filePath":"server/intro.md","lastUpdated":1753668941000}'),t={name:"server/intro.md"};function s(a,e,r,l,i,n){return d(),c("div",null,e[0]||(e[0]=[p('<h1 id="phecda-server" tabindex="-1">phecda-server <a class="header-anchor" href="#phecda-server" aria-label="Permalink to &quot;phecda-server&quot;">​</a></h1><p>一款易于接入、可复用类型的类<code>nestjs</code>服务端框架</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果熟悉<code>nestjs</code>或者其他依类似框架，并已决心使用这个方案</p><p>不用在这里浪费时间，对照后续文档，直接查看<a href="https://github.com/fgsreally/phecda/tree/main/examples/server" target="_blank" rel="noreferrer">案例</a>即可</p><p>以下的部分主要为抱着调研心态的游客解惑</p></div><h2 id="intro" tabindex="-1">intro <a class="header-anchor" href="#intro" aria-label="Permalink to &quot;intro&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">我不需要一个玩具</p><p>很多开源的服务端框架有很棒的性能和特性，但实际上，社区里的实践多是一些无关轻重的项目，或许未来会成为主流技术，但当下看起来更像是一个花哨有趣的玩具。</p><p>但我真正需要的，是一个能让我无后顾之忧地在现有项目中使用的技术</p></div><p>我希望有一款服务端在个人、企业、或大或小的项目...无论在任何时候都能帮上忙</p><p>它以<strong>实用</strong>为第一且唯一的目标，而不是为开发者提供想象空间，坦率地说，相较于其他任何框架，这都是一个极度<strong>乏味</strong>的方案，</p><p>很多优秀的开源方案会强调的部分，比如体积和压测，<code>PS</code>不关心</p><blockquote><p>虽然确实依赖少体积小，但这并不是目的，如果有必要的话，我会毫不犹豫膨胀体积</p></blockquote><blockquote><p>性能与使用的框架有关，目前从压测看会比原有的框架并发少 20%（这看上去是个很恐怖的数字，但鉴于<code>benchmark</code>的猫腻,实际业务的影响几乎没有）， 我会尽力让性能维持在当前的水平上，但不会花时间做一个提高性能百分之 x 的改动</p></blockquote><p><code>PS</code>更重视维护性、可读性、开发体验、代码量...<code>一些业务中真正能让开发者受益的东西</code></p><h2 id="类nestjs的写法" tabindex="-1">类<code>nestjs</code>的写法 <a class="header-anchor" href="#类nestjs的写法" aria-label="Permalink to &quot;类`nestjs`的写法&quot;">​</a></h2><p>沿用了一部分<code>nestjs</code>的模式:</p><ol><li>以类为核心的写法能提供比较规范的格式和不错的可读性</li><li>利用元数据实现的控制反转能提供很棒的体验，</li><li><code>aop</code> 也能帮助注意力集中在业务本身上</li></ol><p>但<code>nestjs</code>可能导致代码冗余和理解困难的特性，如过于灵活的依赖注入和兼容，这些部分会移除</p><p>总之，只使用了我认为好用的部分</p><blockquote><p><code>类nestjs</code>只是为了方便理解，体验也有相似之处，但本质大相径庭，如果开发者坚信诸如“模块级+花样繁多的注入”“请求级的生命周期” 有巨大意义，那么<code>PS</code>绝对是来添乱的</p></blockquote><h2 id="易于接入" tabindex="-1">易于接入 <a class="header-anchor" href="#易于接入" aria-label="Permalink to &quot;易于接入&quot;">​</a></h2><p>易于接入和易于移植并不是同一回事</p><p>易于移植并不是完全意义的好事，因为真实的项目大部分时候不会无端的移植，</p><p>为什么要花时间将一个无比稳定的 <code>express</code> 应用用 <code>hono</code> 重写一遍？即使这样做很容易</p><p>真实的情况是，我可能要接着开发这个 <code>express</code> 应用，提供的新接口显然也要是一个<code>express router</code>，新模块要能调用旧模块，甚至旧模块要能调用新模块，很多时候只能捏着鼻子接着用 <code>express</code> 的思路做</p><p>最好的情况是，新模块本质是一个 <code>express</code> 的<strong>一部分</strong>，那么一切问题都会引刃而解。</p><p><code>ps</code> 就是这么做的,出于这个特点，<code>ps</code> 能支持各种服务端以及微服务</p><blockquote><p><code>ps</code> 能接入绝大部分底层服务端框架，但对于依赖编译工具的高级框架，如 <code>nextjs/nitro</code>等则不行</p><p>我承认至少一部分框架是需要支持的，（好吧其实就只有 <code>nextjs</code>），</p><p>但这工作量对我实在是过于残忍，且本人对<code>nextjs</code>有极大恶意，故不打算支持</p></blockquote><div class="info custom-block"><p class="custom-block-title">INFO</p><p>这和<code>nestjs</code>也不太一样（虽然其也号称<code>progressive</code>, 但我相信不会真有人这么用的）</p><p><code>nestjs</code>侧重于使不同框架作为其底层的运行时</p><p>由于上层设计过重，<code>nestjs</code>很难去“迁就”底层服务框架，结果就是官方无力兼容<code>express</code>以外的东西，甚至连<code>fastfiy</code>的特性都遗失了不少</p><p>而<code>ps</code>则更像是对原有框架的加强</p></div><br><p>上述两点足够让内部代码较为糟糕的团队心动， 但如果你是一位技术的狂信徒，可能确实需要一个强而有力的 <code>feature</code> 说服自己，那<code>PS</code>也提供了一些吸引眼球的特性</p><p><code>PS</code>提供了不少实用且独特的功能，但只有这两个功能称得上绝无仅有</p><h2 id="代码和类型的复用" tabindex="-1">代码和类型的复用 <a class="header-anchor" href="#代码和类型的复用" aria-label="Permalink to &quot;代码和类型的复用&quot;">​</a></h2><blockquote><p>好吧，也可以叫端到端类型安全</p></blockquote><p>我不太确定其他开发者对类型复用的理解是什么， 我的理解大概是有两个步骤</p><ol><li><p>声明类型</p></li><li><p>使用特定的请求库，复用这个类型</p><p>可能在此基础上还有一些区别，比如：</p></li></ol><p>如何声明类型的，是通过<code>zod</code>等方式隐式推导类型还是通过单独显式声明？是完全通过类型推导去区分<code>method/query/body/params</code>，如<code>elysia</code>，还是完全不区分，直接写死标准？（全部使用<code>POST</code>请求，并将数据挂到<code>body</code>）,如<code>trpc/tsrpc</code></p><p>无论是写死标准还是使用特定请求库，都不一定是好事：</p><ol><li><p>你真的确定手头的项目可以完全舍弃<code>restful</code>标准吗</p></li><li><p>使用大量类型体操可能导致<code>ide</code> 卡顿或对眼睛不友好（可以看一下<code>elysia</code>的类型）</p></li></ol><hr><p>在服务端编写一些代码，生成一些代码，然后想办法让前端请求库在类型上复用代码类型，在调用上利用元数据（对应<code>phecda-client</code>库）</p><p>将易接入性延续至客户端，包装<code>axios/alova</code>而非自行制作请求库（<code>phecda-server</code>/<code>express</code>&lt;==&gt;<code>phecda-client</code>/<code>axios</code>）</p><p>不会影响业务中旧有的任何写法，成本低，过程透明</p><blockquote><p>如果业务原有的请求库不是<code>axios</code>（真是羡慕...）可以自行包装一个，这很简单，代码一百行以内就能搞定</p></blockquote><h2 id="极速的热更新" tabindex="-1">极速的热更新 <a class="header-anchor" href="#极速的热更新" aria-label="Permalink to &quot;极速的热更新&quot;">​</a></h2><p>现在的热更新，多是通过启动一个守护进程，当代码更新时，守护进程杀死原进程并启动一个新进程，并重新建立数据库连接等。</p><p>即使使用<code>swc</code>等来编译，进程重启的过程仍然漫长</p><p><code>ps</code>实现文件级别的热更新（如同<code>vite</code>中做的一样），文件更新时替换对应的模块，进程无需重启，再搭配<code>swc</code>，可以实现<code>&lt;0.1s</code>的热更新</p><p>我还是要强调：这是小于零点一秒的热更新！开发体验绝对是极致中的极致了</p>',46)]))}const b=o(t,[["render",s]]);export{u as __pageData,b as default};
