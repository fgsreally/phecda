import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.Ce8gA_vL.js";const c=JSON.parse('{"title":"模块外","description":"","frontmatter":{},"headers":[],"relativePath":"server/advance/outside-module.md","filePath":"server/advance/outside-module.md","lastUpdated":1749567907000}'),n={name:"server/advance/outside-module.md"};function p(h,s,l,k,d,r){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="模块外" tabindex="-1">模块外 <a class="header-anchor" href="#模块外" aria-label="Permalink to &quot;模块外&quot;">​</a></h1><p>之前的例子，都是模块调用模块，那还有一种情况，就是模块外需要调用模块</p><p>比如，你需要在老<code>express</code>项目中，旧的路由体系里，使用模块的功能，那么可以这样：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserModule)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必须要等Factory执行完毕，才能获取到模块实例，如果没有，那么需要前面添加await</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>如果你需要模块能游离在整个<code>ps</code>体系之外，即不通过<code>factory</code>实例的方式，那么可以通过命名空间:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useS } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;phecda-server&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserModule,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-namespace&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,6)]))}const E=i(n,[["render",p]]);export{c as __pageData,E as default};
