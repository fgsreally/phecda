import{_ as s,c as a,o as i,a2 as e}from"./chunks/framework.OWRZTr7j.js";const g=JSON.parse('{"title":"模块","description":"","frontmatter":{},"headers":[],"relativePath":"vue/module.md","filePath":"vue/module.md","lastUpdated":1719223183000}'),n={name:"vue/module.md"},l=e(`<h1 id="模块" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h1><p>和<code>phecda-server</code>一致，也是通过<code>Tag/类名</code>去标记模块，且是唯一标记，</p><p>只会加载第一个，后续同名模块被忽略</p><p>且也是单例模式，每个<code>model</code>只会被实例化一次</p><h2 id="非单例模式" tabindex="-1">非单例模式 <a class="header-anchor" href="#非单例模式" aria-label="Permalink to &quot;非单例模式&quot;">​</a></h2><p>这种情况比较少，比如弹窗（每次弹出时实例化一次）</p><p>可以这样</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Isolate } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;phecda-vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Isolate</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModalModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ModalModel)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每次都会重新创建一个实例</span></span></code></pre></div><h2 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h2><p>情况极少，原理是使用<code>ShallowReactive</code>代替<code>reactive</code></p><p>可以这样</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Shallow } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;phecda-vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Shallow</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Model)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每次都会重新创建一个实例</span></span></code></pre></div>`,12),t=[l];function p(h,d,k,o,c,r){return i(),a("div",null,t)}const u=s(n,[["render",p]]);export{g as __pageData,u as default};
